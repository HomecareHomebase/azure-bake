name: hchbapi
shortName: hchbapi
owner: arch
version: 1.0.0
ingredients:
  - "@azbake/ingredient-apim@*"
  - "@azbake/ingredient-apim-api@*"
  - "@azbake/ingredient-app-insights@*"
  - "@azbake/ingredient-event-hub@~0.1"
  - "@azbake/ingredient-event-hub-namespace@*"
  - "@azbake/ingredient-storage@*"
  - "@azbake/ingredient-null@*"
  - "@azbake/ingredient-metric-alert@*"
resourceGroup: true
parallelRegions: false
rgOverride: "[apim.get_resource_group()]"
variables:
  aiName: "[appinsights.get_resource_name('apimhchbapi')]"
  aiKey: "[await appinsights.get_instrumentation_key('apimhchbapi','appinsights', true)]"
  aiResourceGroup: "[coreutils.resource_group('appinsights', false, null, true)]"
  apimName: "[apim.get_resource_name()]"
  diagResourceGroup: RG_DIAGNOSTICS_EUS_SND
  diagEventHubNamespace: sndeusehndiagnostics
  diagAuthRuleName: RootManageSharedAccessKey
  vnetResourceGroup: RG_NONPROD_EAST_Network
  vnetName: VNET_NONPROD_EAST
  vnetSubnetName: APIM
  secondaryVnetResourceGroup: RG_NONPROD_EAST_Network
  secondaryVnetName:  VNET_NONPROD_EAST
  secondaryVnetSubnetName: APIM
  skuName: Developer
  skuCapacity: 1
  interopOrchestrationServiceDallasEndpointVar: "https://exchangeorchestrationdev.hchb.local/api/v1"
  interopOrchestrationServiceLouisvilleEndpointVar: "https://exchangeorchestrationdev.hchb.local/api/v1"
  interopOrchestrationServiceAzureEastEndpointVar: "https://exchangeorchestrationdev.hchb.local/api/v1"
  interopOrchestrationServiceAzureWestEndpointVar: "https://exchangeorchestrationdev.hchb.local/api/v1"
  authserver_clientRegistrationEndpoint: "https://login.microsoftonline.com/65d8323f-dcda-47dc-9506-32a61106ec9f/oauth2/authorize"
  authserver_authorizationEndpoint: "https://login.microsoftonline.com/65d8323f-dcda-47dc-9506-32a61106ec9f/oauth2/authorize"
  authserver_tokenEndpoint: "https://login.microsoftonline.com/65d8323f-dcda-47dc-9506-32a61106ec9f/oauth2/token"
  authserver_tokenV2Endpoint: "https://login.microsoftonline.com/65d8323f-dcda-47dc-9506-32a61106ec9f/oauth2/v2/token"
  authserver_resource_value: "https://hchbazure.onmicrosoft.com/e30fe5ca-69f3-4cd9-8609-67cfafb3650f"
  authserver_clientId: "clientid"
  authserver_clientSecret: "clientsecret"
  onPremDalClusterUrl: "http://k8s-dev.hchb.local"
  onPremLouClusterUrl: "http://k8s-dev.hchb.local"
  agencyStateAksServiceHost: "agency-hchb-shared.aks-dev.hchb.local"
  agencyStateK8sServiceHost: "agency-hchb-shared.k8s-dev.hchb.local"
  userConfigurationAksServiceHost: "user-configuration-settings.aks-dev.hchb.local"
  userConfigurationK8sServiceHost: "user-configuration-settings.k8s-dev.hchb.local"
  apimHealthCheckUserName: "monitis"
  apimHealthCheckPassword: "password"
  aksEastClusterUrl: "http://aks-dev.hchb.local"
  aksWestClusterUrl: "http://aks-dev.hchb.local"
  storageAccountName: "[coreutils.create_storage_name()]"
  container: "[storage.get_storageaccount( await coreutils.resource_group(), await coreutils.variable('storageAccountName'))]"
  sureScriptsDallasApiEndpoint: "https://interoperabilityapiLouDEV.hchb.local/csp/healthshare/carequalityfhirserver/fhiroauth"
  sureScriptsLouisvilleApiEndpoint: "https://interoperabilityapiLouQA.hchb.local/csp/healthshare/carequalityfhir/fhiroauth"
  sureScriptsScope: "https://hchbazure.onmicrosoft.com/e30fe5ca-69f3-4cd9-8609-67cfafb3650f"
  sureScriptsClientId: "60ed9f1f-6dba-418d-a9c2-6e48102dfffe"
  sureScriptsClientSecret: "TODO"
  apimSslCertData: "[coreutils.variable('ApimSslCertDataValue')]"
  apimSslCertPassword: "[coreutils.variable('ApimSslCertPasswordValue')]"
  apimHostnamePrefix: apisnd
  apimV1HostnamePrefix: apimsnd
  idpOffClusterUrl: https://idpdev.hchb.com
  svcAcctGrantSecret: superSecretPassword42
  loggingEventHubName: "sndeusehhchbapi"
  loggingEventHubNamespace: "sndeusehndiagnostics"
  loggingEventHubNamespaceResourceGroup: "RG_DIAGNOSTICS_EUS_SND"
  # extra variables
  K8sHostname: k8s-dev.hchb.local
  AksHostname: aks-dev.hchb.local
  SureScriptsThumbprint_1: B825052CF385BC5AB01D908D4CAA4BE9CE73CD60
  SureScriptsThumbprint_2: 6280bae72beb0799b492cc63426d7998a48ed303
  SureScriptsThumbprint2021: 720402D2F5BA240FBA76EE48547542533FE136A5
  SureScriptsClientId: 60ed9f1f-6dba-418d-a9c2-6e48102dfffe
  SureScriptsClientSecret: SureScriptsClientSecret
  SureScriptsDallasApiEndpoint: https://interoperabilityapiLouDEV.hchb.local/csp/healthshare/carequalityfhirserver/fhiroauth
  SureScriptsIpRangeFrom: 0.0.0.0
  SureScriptsIpRangeTo: 255.255.255.255
  SureScriptsLouisvilleApiEndpoint: https://interoperabilityapiLouQA.hchb.local/csp/healthshare/carequalityfhir/fhiroauth
  SureScriptsMiscIp1: 74.132.207.81
  SureScriptsMiscIp2: 127.0.0.1
  SureScriptsMiscIp3: 127.0.0.1
  SureScriptsMiscIp4: 127.0.0.1
  SureScriptsScope: https://hchbazure.onmicrosoft.com/e30fe5ca-69f3-4cd9-8609-67cfafb3650f
  DallasIp: 97.107.119.69
  DavacoIp: 38.122.206.162
  LouisvilleIp: 69.2.197.65
  OlympiaIp: 74.142.158.18
recipe:
  apim-app-insights-deploy: 
    properties:
      type: "@azbake/ingredient-app-insights"
      source: ""
      condition: "[coreutils.current_region_primary()]"
      parameters:
        appInsightsName: "[coreutils.variable('aiName')]"
        rgOverride: "[coreutils.variable('aiResourceGroup')]"
  apim-event-hub:
    properties:
      type: "@azbake/ingredient-event-hub"
      source: ""
      condition: "[coreutils.current_region_primary()]"
      parameters:
        eventHubNamespaceResourceGroup: "[coreutils.variable('diagResourceGroup')]"
        eventHubNamespaceName: "[coreutils.variable('diagEventHubNamespace')]"
        eventHubName: "[coreutils.variable('loggingEventHubName')]"
        messageRetentionInDays: "7"
        partitionCount: "4"
        policyName: defaultPolicy
    dependsOn:
      - apim-app-insights-deploy
  apim-deploy:
    properties:
      type: "@azbake/ingredient-apim"
      condition: "[coreutils.current_region_primary()]"
      parameters:
        apimService:
          name: "[coreutils.variable('apimName')]"
          location: "[coreutils.current_region().name]"
          publisherEmail: AzureAdmin@hchb.com
          publisherName: Administrator
          sku:
            name: "[coreutils.variable('skuName')]"
            capacity: "[coreutils.variable('skuCapacity')]"
          additionalLocations:
            - location: "[coreutils.secondary_region().name]"
              sku:
                name: "[coreutils.variable('skuName')]"
                capacity: "[coreutils.variable('skuCapacity')]"
              virtualNetworkConfiguration:
                subnetResourceId: >-
                  [(await apim.get_subnet(
                      await coreutils.variable('secondaryVnetResourceGroup'),
                      await coreutils.variable('secondaryVnetName'),
                      await coreutils.variable('secondaryVnetSubnetName'))).id]
          enableClientCertificate: true
          customProperties:
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30: "false"
            Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2: "false"
          virtualNetworkType: External
          virtualNetworkConfiguration:
            subnetResourceId: >-
              [(await apim.get_subnet(
                  await coreutils.variable('vnetResourceGroup'),
                  await coreutils.variable('vnetName'),
                  await coreutils.variable('vnetSubnetName'))).id]
          # hostnameConfigurations:
          #   - type: Proxy
          #     hostName: "[(await coreutils.variable('apimHostnamePrefix')) + '.hchb.com']"
          #     encodedCertificate: "[coreutils.variable('apimSslCertData')]"
          #     certificatePassword: "[coreutils.variable('apimSslCertPassword')]"
          #     defaultSslBinding: true
          #     negotiateClientCertificate: false
          #   - type: Management
          #     hostName: "[(await coreutils.variable('apimHostnamePrefix')) + '-management.hchb.com']"
          #     encodedCertificate: "[coreutils.variable('apimSslCertData')]"
          #     certificatePassword: "[coreutils.variable('apimSslCertPassword')]"
          #   - type: Scm
          #     hostName: "[(await coreutils.variable('apimHostnamePrefix')) + '-scm.hchb.com']"
          #     encodedCertificate: "[coreutils.variable('apimSslCertData')]"
          #     certificatePassword: "[coreutils.variable('apimSslCertPassword')]"
          #   - type: DeveloperPortal
          #     hostName: "[(await coreutils.variable('apimHostnamePrefix')) + '-portal.hchb.com']"
          #     encodedCertificate: "[coreutils.variable('apimSslCertData')]"
          #     certificatePassword: "[coreutils.variable('apimSslCertPassword')]"
          #   - type: Proxy
          #     hostName: "[(await coreutils.variable('apimV1HostnamePrefix')) + '.hchb.com']"
          #     encodedCertificate: "[coreutils.variable('apimSslCertData')]"
          #     certificatePassword: "[coreutils.variable('apimSslCertPassword')]"
          #     defaultSslBinding: true
          #     negotiateClientCertificate: false
          #   - type: Proxy
          #     hostName: "[(await coreutils.variable('apimHostnamePrefix')) + '-cert.hchb.com']"
          #     encodedCertificate: "[coreutils.variable('apimSslCertData')]"
          #     certificatePassword: "[coreutils.variable('apimSslCertPassword')]"
          #     defaultSslBinding: true
          #     negotiateClientCertificate: true
        namedValues:
          - name: interopOrchestrationServiceDallasEndpoint
            displayName: InteropOrchestrationServiceDallasEndpoint
            secret: false
            value: "[coreutils.variable('interopOrchestrationServiceDallasEndpointVar')]"
          - name: interopOrchestrationServiceLouisvilleEndpoint
            displayName: InteropOrchestrationServiceLouisvilleEndpoint
            secret: false
            value: "[coreutils.variable('interopOrchestrationServiceLouisvilleEndpointVar')]"
          - name: interopOrchestrationServiceAzureEastEndpoint
            displayName: InteropOrchestrationServiceAzureEastEndpoint
            secret: false
            value: "[coreutils.variable('interopOrchestrationServiceAzureEastEndpointVar')]"
          - name: interopOrchestrationServiceAzureWestEndpoint
            displayName: InteropOrchestrationServiceAzureWestEndpoint
            secret: false
            value: "[coreutils.variable('interopOrchestrationServiceAzureWestEndpointVar')]"
          - name: onPremDalClusterUrl
            displayName: OnPremDalClusterUrl
            secret: false
            value: "[coreutils.variable('onPremDalClusterUrl')]"
          - name: onPremDalClusterHostHeaderSuffix
            displayName: OnPremDalClusterHostHeaderSuffix
            secret: false
            value: "[coreutils.variable('K8sHostname')]"
          - name: aksEastClusterUrl
            displayName: AksEastClusterUrl
            secret: false
            value: "[coreutils.variable('aksEastClusterUrl')]"
          - name: aksEastClusterHostHeaderSuffix
            displayName: AksEastClusterHostHeaderSuffix
            secret: false
            value: "[coreutils.variable('AksHostname')]"
          - name: aksWestClusterUrl
            displayName: AksWestClusterUrl
            secret: false
            value: "[coreutils.variable('aksWestClusterUrl')]"
          - name: aksWestClusterHostHeaderSuffix
            displayName: AksWestClusterHostHeaderSuffix
            secret: false
            value: "[coreutils.variable('AksHostname')]"
          - name: onPremLouClusterUrl
            displayName: OnPremLouClusterUrl
            secret: false
            value: "[coreutils.variable('onPremLouClusterUrl')]"
          - name: onPremLouClusterHostHeaderSuffix
            displayName: OnPremLouClusterHostHeaderSuffix
            secret: false
            value: "[coreutils.variable('K8sHostname')]"
          - name: agencyStateAksServiceHost
            displayName: AgencyStateAksServiceHost
            secret: false
            value: "[coreutils.variable('agencyStateAksServiceHost')]"
          - name: agencyStateK8sServiceHost
            displayName: AgencyStateK8sServiceHost
            secret: false
            value: "[coreutils.variable('agencyStateK8sServiceHost')]"
          - name: userConfigurationAksServiceHost
            displayName: UserConfigurationAksServiceHost
            secret: false
            value: "[coreutils.variable('userConfigurationAksServiceHost')]"
          - name: userConfigurationK8sServiceHost
            displayName: UserConfigurationK8sServiceHost
            secret: false
            value: "[coreutils.variable('userConfigurationK8sServiceHost')]"
          - name: agencyStateServiceCacheDuration
            displayName: AgencyStateServiceCacheDuration
            secret: false
            value: "3600"
          - name: failoverCacheDuration
            displayName: FailoverCacheDuration
            secret: false
            value: "10"
          - name: userConfigurationServiceCacheDuration
            displayName: UserConfigurationServiceCacheDuration
            secret: false
            value: "3600"
          - name: healthCheckUserName
            displayName: HealthCheckUserName
            secret: false
            value: "[coreutils.variable('apimHealthCheckUserName')]"
          - name: healthCheckPassword
            displayName: HealthCheckPassword
            secret: true
            value: "[coreutils.variable('apimHealthCheckPassword')]"
          - name: sureScriptsDallasApiEndpoint
            displayName: SureScriptsDallasApiEndpoint
            secret: false
            value: "[coreutils.variable('sureScriptsDallasApiEndpoint')]"
          - name: sureScriptsLouisvilleApiEndpoint
            displayName: SureScriptsLouisvilleApiEndpoint
            secret: false
            value: "[coreutils.variable('sureScriptsLouisvilleApiEndpoint')]"
          - name: sureScriptsScope
            displayName: SureScriptsScope
            secret: false
            value: "[coreutils.variable('sureScriptsScope')]"
          - name: sureScriptsClientId
            displayName: SureScriptsClientId
            secret: false
            value: "[coreutils.variable('sureScriptsClientId')]" 
          - name: sureScriptsClientSecret
            displayName: SureScriptsClientSecret
            secret: true
            value: "[coreutils.variable('sureScriptsClientSecret')]"
          - name: authServerTokenEndpoint
            displayName: AuthServerTokenEndpoint
            secret: false
            value: "[coreutils.variable('authserver_tokenEndpoint')]"
          - name: authServerV2TokenEndpoint
            displayName: AuthServerV2TokenEndpoint
            secret: false
            value: "[coreutils.variable('authserver_tokenV2Endpoint')]"
          - name: sureScriptsThumbprint1
            displayName: SureScriptsThumbprint1
            secret: false
            value: "[coreutils.variable('SureScriptsThumbprint_1')]"
          - name: sureScriptsThumbprint2
            displayName: SureScriptsThumbprint2
            secret: false
            value: "[coreutils.variable('SureScriptsThumbprint_2')]"
          - name: sureScriptsThumbprint2021
            displayName: SureScriptsThumbprint2021
            secret: false
            value: "[coreutils.variable('SureScriptsThumbprint2021')]"
          - name: sureScriptsMiscIp1
            displayName: SureScriptsMiscIp1
            secret: false
            value: "[coreutils.variable('SureScriptsMiscIp1')]"
          - name: sureScriptsMiscIp2
            displayName: SureScriptsMiscIp2
            secret: false
            value: "[coreutils.variable('SureScriptsMiscIp2')]"
          - name: sureScriptsMiscIp3
            displayName: SureScriptsMiscIp3
            secret: false
            value: "[coreutils.variable('SureScriptsMiscIp3')]"
          - name: sureScriptsMiscIp4
            displayName: SureScriptsMiscIp4
            secret: false
            value: "[coreutils.variable('SureScriptsMiscIp4')]"
          - name: sureScriptsIpRangeFrom
            displayName: SureScriptsIpRangeFrom
            secret: false
            value: "[coreutils.variable('SureScriptsIpRangeFrom')]"
          - name: sureScriptsIpRangeTo
            displayName: SureScriptsIpRangeTo
            secret: false
            value: "[coreutils.variable('SureScriptsIpRangeTo')]"
          - name: dallasIp
            displayName: DallasIp
            secret: false
            value: "[coreutils.variable('DallasIp')]"
          - name: davacoIp
            displayName: DavacoIp
            secret: false
            value: "[coreutils.variable('DavacoIp')]"
          - name: louisvilleIp
            displayName: LouisvilleIp
            secret: false
            value: "[coreutils.variable('LouisvilleIp')]"
          - name: olympiaIp
            displayName: OlympiaIp
            secret: false
            value: "[coreutils.variable('OlympiaIp')]"
          - name: idpBaseUrl
            displayName: IdpBaseUrl
            secret: false
            value: "[coreutils.variable('idpOffClusterUrl')]"
          - name: idpSvcAcctGrantSecret
            displayName: IdpSvcAcctGrantSecret
            secret: true
            value: "[coreutils.variable('svcAcctGrantSecret')]"
          - name: throttleRateUtilities
            displayName: ThrottleRateUtilities
            secret: false
            value: "1000"
          - name: throttlePeriodUtilities
            displayName: ThrottlePeriodUtilities
            secret: false
            value: "60"
          - name: throttleRateConnect
            displayName: ThrottleRateConnect
            secret: false
            value: "1000"
          - name: throttlePeriodConnect
            displayName: ThrottlePeriodConnect
            secret: false
            value: "60"
          - name: throttleRateConnectAgency
            displayName: ThrottleRateConnectAgency
            secret: false
            value: "1000"
          - name: throttlePeriodConnectAgency
            displayName: ThrottlePeriodConnectAgency
            secret: false
            value: "60"
          - name: throttleRateConnectVendor
            displayName: ThrottleRateConnectVendor
            secret: false
            value: "1000"
          - name: throttlePeriodConnectVendor
            displayName: ThrottlePeriodConnectVendor
            secret: false
            value: "60"
          - name: throttleRateConnectVendorOrca
            displayName: ThrottleRateConnectVendorOrca
            secret: false
            value: "1000"
          - name: throttlePeriodConnectVendorOrca
            displayName: ThrottlePeriodConnectVendorOrca
            secret: false
            value: "60"
          - name: apimHostname
            displayName: ApimHostname
            value: "[(await coreutils.variable('apimHostnamePrefix')) + '.hchb.com']"
            secret: false
          - name: apimUrl
            displayName: ApimUrl
            value: "['https://' + (await coreutils.variable('apimHostnamePrefix')) + '.hchb.com']"
            secret: false
          - name: apimHostnamePrefix
            displayName: ApimHostnamePrefix
            value: "[coreutils.variable('apimHostnamePrefix')]"
            secret: false
        apis:
          - name: echo-api # delete default echo API
            delete: true
        products:
          - name: hchbUtilities
            displayName: HCHB.Utilities
            description: Product for utility API's.
            subscriptionRequired: false
            state: published
            groups:
              - Administrators
            policy:
              format: xml-link
              value: file:///./policies/utilities-policy.xml
          - name: hchbConnect
            displayName: HCHB.Connect
            description: Product for API's that will control their own policies.
            subscriptionRequired: false
            state: published
            groups:
              - Administrators
            policy:
              format: xml-link
              value: file:///./policies/hchbconnect-policy.xml
          - name: hchbConnect-agency
            displayName: HCHB.Connect - Agency
            description: Product for API's that use agency state and outh authentication.
            subscriptionRequired: false
            state: published
            groups:
              - Administrators
            policy:
              format: xml-link
              value: file:///./policies/hchbconnect-agency-policy.xml
          - name: hchbConnect-vendor
            displayName: HCHB.Connect - Vendor
            description: Product for API's that for vendors that use vendor grant type from IDP.
            subscriptionRequired: false
            state: published
            groups:
              - Administrators
            policy:
              format: xml-link
              value: file:///./policies/hchbconnect-vendor-policy.xml
          - name: hchbConnect-vendor-orca
            displayName: HCHB.Connect - Vendor (Orca)
            description: Product for API's that use interop orchestration for authentication.
            subscriptionRequired: false
            state: published
            groups:
              - Administrators
            policy:
              format: xml-link
              value: file:///./policies/hchbconnect-vendor-orca-policy.xml
          - name: hchbCustom-accentcare-orca
            displayName: HCHB.Custom - AccentCare (Orca)
            description: Product for Accentcare Only API's that use interop orchestration for authentication.
            subscriptionRequired: true
            state: published
            groups:
              - Administrators
            policy:
              format: xml-link
              value: file:///./policies/hchbconnect-accentcare-orca-policy.xml
          - name: starter # delete default starter product
            delete: true
          - name: unlimited  # delete default unlimited product
            delete: true
        loggers:
          - name: "[coreutils.variable('aiName')]"
            cleanKeys: true
            description: Application Insight Instance
            loggerType: applicationInsights
            credentials: 
              instrumentationKey: "[coreutils.variable('aiKey')]"
          - name: "eventhub-logger"
            cleanKeys: true
            description: EventHub Logger
            loggerType: azureEventHub
            credentials: 
              name:  "[coreutils.variable('loggingEventHubName')]"
              connectionString: >-
                [await eventhub.get_primary_connectionstring(
                  await coreutils.variable('loggingEventHubNamespace'),
                  await coreutils.variable('loggingEventHubName'),
                  'defaultPolicy',
                  await coreutils.variable('loggingEventHubNamespaceResourceGroup'))]
        diagnostics:
          name: apimDiagnostics
          eventHubAuthorizationRuleId: >-
            [(await eventhubnamespace.get_authorizationrule(
                await coreutils.variable('diagResourceGroup'),
                await coreutils.variable('diagEventHubNamespace'),
                await coreutils.variable('diagAuthRuleName'))).id]
          metrics:
            - category: AllMetrics
              timeGrain: PT1M
              enabled: true
              retentionPolicy:
                days: 7
                enabled: true
          logs:
            - category: GatewayLogs
              enabled: true
              retentionPolicy:
                days: 7
                enabled: true
        authServers:
          - name: hchb-azure-ad
            displayName: "HCHB_Azure_AD"
            description: "HCHB Azure AD"
            clientRegistrationEndpoint: "[coreutils.variable('authserver_clientRegistrationEndpoint')]"
            authorizationEndpoint: "[coreutils.variable('authserver_authorizationEndpoint')]"
            tokenEndpoint: "[coreutils.variable('authserver_tokenEndpoint')]"
            grantTypes:
              - clientCredentials
            authorizationMethods:
              - GET
              - POST
            clientAuthenticationMethod:
              - Body
            tokenBodyParameters:
              - name: resource
                value: "[coreutils.variable('authserver_resource_value')]"
            bearerTokenSendingMethods:
              - authorizationHeader
            clientId: "[coreutils.variable('authserver_clientId')]"
            clientSecret: "[coreutils.variable('authserver_clientSecret')]"
        autoScaleSettings:
          - name: apimAutoscale
            enabled: true
            profiles:
              - name: default
                capacity:
                  minimum: "1"
                  maximum: "2"
                  default: "1"
                rules: 
                  - metricTrigger: 
                      metricName: Capacity
                      timeGrain: PT1M
                      statistic: Max
                      timeWindow: PT10M
                      timeAggregation: Average
                      operator: GreaterThan
                      threshold: 70
                    scaleAction:
                      direction: Increase
                      type: ChangeCount
                      value: "1"
                      cooldown: PT60M
                  - metricTrigger: 
                      metricName: Capacity
                      timeGrain: PT1M
                      statistic: Average
                      timeWindow: PT10M
                      timeAggregation: Average
                      operator: LessThan
                      threshold: 50
                    scaleAction:
                      direction: Decrease
                      type: ChangeCount
                      value: "1"
                      cooldown: PT60M
            notifications:
              - email:
                  sendToSubscriptionAdministrator: true
                  sendToSubscriptionCoAdministrators: true
        backends:
          - name: surescripts_dallas_backend
            title: "SureScripts Dallas Backend"
            description: "SureScripts Dallas Backend"
            protocol: http
            url: "[coreutils.variable('sureScriptsDallasApiEndpoint')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: surescripts_louisville_backend
            title: "SureScripts Louisville Backend"
            description: "SureScripts Louisville Backend"
            protocol: http
            url: "[coreutils.variable('sureScriptsLouisvilleApiEndpoint')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: interop_dallas_backend
            title: "Interoperability Dallas Backend"
            description: "Interoperability Dallas Backend"
            protocol: http
            url: "[coreutils.variable('interopOrchestrationServiceDallasEndpointVar')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: interop_louisville_backend
            title: "Interoperability Louisville Backend"
            description: "Interoperability Louisville Backend"
            protocol: http
            url: "[coreutils.variable('interopOrchestrationServiceLouisvilleEndpointVar')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: aks_eus_backend
            title: "AKS East Backend"
            description: "AKS East Backend"
            protocol: http
            url: "[coreutils.variable('aksEastClusterUrl')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: aks_wus_backend
            title: "AKS West Backend"
            description: "AKS West Backend"
            protocol: http
            url: "[coreutils.variable('aksWestClusterUrl')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: onprem_dallas_backend
            title: "OnPrem Dallas Backend"
            description: "OnPrem Dallas Backend"
            protocol: http
            url: "[coreutils.variable('onPremDalClusterUrl')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
          - name: onprem_louisville_backend
            title: "OnPrem Louisville Backend"
            description: "OnPrem Louisville Backend"
            protocol: http
            url: "[coreutils.variable('onPremLouClusterUrl')]"
            tls:
              validateCertificateChain: false
              validateCertificateName: false
    dependsOn:
      - apim-event-hub
  # apim-deploy-alert1:
  #   properties:
  #     type: "@azbake/ingredient-metric-alert"
  #     source: "[apim.get_source()]"
  #     condition: "[coreutils.current_region_primary()]"
  #     parameters:
  #       alertDescription: "The Capacity metric has exceeded the threshold of 80% for 30 minutes."
  #       alertType: "Static"
  #       alertSeverity: 2
  #       isEnabled: true
  #       source-type: "Microsoft.ApiManagement/service"
  #       metricName: "Capacity"
  #       operator: "GreaterThan"
  #       threshold: "80"
  #       timeAggregation: "Average"
  #       windowSize: "PT30M"
  #       evaluationFrequency: "PT30M"
  #       actionGroups:
  #         - actionGroupShortName: "opsgenieinfraalert"
  #   dependsOn: 
  #     - apim-deploy
  api-default-api:
    properties:
      type: "@azbake/ingredient-apim-api"
      source: "[apim.get_source()]"
      condition: "[coreutils.current_region_primary()]"
      parameters:
        options:
          apiWaitTime: 60
        apis:
          - name: utilities-api
            displayName: Utilities API
            description: Utilities API
            versioningScheme: Segment
            versions:
              - name: util 
                version: v1
                apiType: http
                path: util
                protocols:
                  - https
                format: openapi
                value: |-
                  openapi: 3.0.1
                  info:
                    title: Utilities API
                    description: HCHB Utilities for general maintenance and operations for this APIM instance
                    version: v1
                  servers:
                    - url: http://localhost
                  paths:
                    /ping:
                      get:
                        summary: Ping
                        description: Ping
                        operationId: ping
                        responses:
                          '200':
                            description: ''
                    /health:
                      get:
                        summary: Health
                        description: Health
                        operationId: health
                        responses:
                          '200':
                            description: ''
                  components:
                    securitySchemes:
                      apiKeyHeader:
                        type: apiKey
                        name: Ocp-Apim-Subscription-Key
                        in: header
                      apiKeyQuery:
                        type: apiKey
                        name: subscription-key
                        in: query
                  security:
                    - apiKeyHeader: [ ]
                    - apiKeyQuery: [ ]
                products:
                  - hchbUtilities
                policies: 
                  - operation: ping
                    format: xml-link
                    value: file:///./policies/utilities-ping-policy.xml
                  - operation: health
                    format: xml-link
                    value: file:///./policies/utilities-health-policy.xml
    dependsOn:
      - apim-deploy
  # apim-storage:
  #   properties:
  #     type: "@azbake/ingredient-storage"
  #     condition: "[coreutils.current_region_primary()]"
  #     parameters:
  #       storageAccountName: "[coreutils.variable('storageAccountName')]"
  #       storageAccesstier: Hot
  #   dependsOn: 
  #     - api-default-api
  # apim-blob-backup:
  #   properties: 
  #     type: "@azbake/ingredient-null"
  #     condition: "[coreutils.current_region_primary()]"
  #     parameters:         
  #       backup: "[storage.get_container(await coreutils.variable('container'), 'backup' )]"             
  #   dependsOn: 
  #     - apim-storage