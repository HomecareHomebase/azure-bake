<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <inbound>
        <base />
        <set-variable name="authHeader" value="@(context.Request.Headers.GetValueOrDefault(&quot;Authorization&quot;,&quot;scheme token&quot;))" />
		<set-variable name="token" value="@(((string)context.Variables[&quot;authHeader&quot;]).Split(' ').Last())" />
		<set-variable name="jwt" value="@(((string)context.Variables[&quot;token&quot;]).AsJwt())" />
        <choose>
            <when condition="@(context.Variables[&quot;jwt&quot;] == null)">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                </return-response>
            </when>
        </choose>
        <set-variable name="subject" value="@(((Jwt)context.Variables[&quot;jwt&quot;])?.Subject)" />
        <!-- V1 token values -->
		<set-variable name="dataCenterId" value="@((string)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;datacenterid&quot;, &quot;0&quot;))" />
		<set-variable name="agencyId" value="@((string)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;agencyid&quot;, &quot;0&quot;))" />
        <set-variable name="tenantServer" value="" />
        <set-variable name="tenantDatabase" value="" />			
		<set-variable name="agencyCacheLookupByTenantContext" value="" />
        <!-- V2 token values -->
        <set-variable name="dataCenter" value="@((string)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;data_center&quot;, &quot;&quot;))" />
        <set-variable name="deploymentRing" value="@((string)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;deployment_ring&quot;, &quot;&quot;))" />
        <!-- Set Rate Limiting-->
        <rate-limit-by-key calls="{{ThrottleRateConnectAgency}}" renewal-period="{{ThrottlePeriodConnectAgency}}" counter-key="@((string)context.Variables[&quot;subject&quot;])" />
        <!-- Lookup cache value for both Louisville and Dallas to determine if they are up or down -->
        <cache-lookup-value key="@(&quot;is-lou-down-key-&quot; + context.Api.Id)" variable-name="is-lou-down" default-value="@(false)" />
        <cache-lookup-value key="@(&quot;is-dal-down-key-&quot; + context.Api.Id)" variable-name="is-dal-down" default-value="@(false)" />
        <cache-lookup-value key="@(&quot;is-eus-down-key-&quot; + context.Api.Id)" variable-name="is-eus-down" default-value="@(false)" />
        <cache-lookup-value key="@(&quot;is-wus-down-key-&quot; + context.Api.Id)" variable-name="is-wus-down" default-value="@(false)" />
        <!-- If datacenter isn't available in the token (v1 token), pull from the agency service -->
        <choose>
	        <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;&quot;)">
	    	    <cache-lookup-value key="@(&quot;datacenter-&quot; + context.Variables[&quot;agencyId&quot;])" variable-name="agencyCacheLookup" default-value="" />
                <choose>
		    		<when condition="@((string)context.Variables[&quot;agencyCacheLookup&quot;] == &quot;&quot;)">
                        <!-- Determine which agency state service to look at first for the agency -->
                        <choose>
                            <when condition="@(&quot;East US&quot;.Equals(context.Deployment.Region, StringComparison.OrdinalIgnoreCase))">
                                <set-variable name="agencyClusterBaseUrl" value="{{AksEastClusterUrl}}" />
                                <set-variable name="newAgencyHostHeaderSuffix" value="{{AksEastClusterHostHeaderSuffix}}" />
                            </when>
                            <when condition="@(&quot;West US&quot;.Equals(context.Deployment.Region, StringComparison.OrdinalIgnoreCase))">
                                <set-variable name="agencyClusterBaseUrl" value="{{AksWestClusterUrl}}" />
                                <set-variable name="newAgencyHostHeaderSuffix" value="{{AksWestClusterHostHeaderSuffix}}" />
                            </when>
                            <otherwise>
                                <set-variable name="agencyClusterBaseUrl" value="{{AksEastClusterUrl}}" />
                                <set-variable name="newAgencyHostHeaderSuffix" value="{{AksEastClusterHostHeaderSuffix}}" />
                            </otherwise>
                        </choose>
                        <!-- If agency isn't available in the token, pull from tenant context (token v1) -->
                        <choose>
                            <when condition="@((string)context.Variables[&quot;agencyId&quot;] == &quot;0&quot;)">
                                <!-- Token V1 windows auth -->
                                <set-variable name="hchbUserClaim" value="@((JValue)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;hchbUser&quot;, (string)null))" />
                                <!-- Token V1 interop auth -->
                                <set-variable name="hchbInteropClaim" value="@((JValue)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;hchbInterop&quot;, (string)null))" />
                                <!-- Token V1 mobile auth -->
                                <set-variable name="hchbMobileUserClaim" value="@((JValue)((Jwt)context.Variables[&quot;jwt&quot;]).Claims.GetValueOrDefault(&quot;hchbMobileUser&quot;, (string)null))" />
                                <choose>
                                    <when condition="@(((JValue)context.Variables[&quot;hchbUserClaim&quot;]).Value != null)">
                                        <set-variable name="tenantContext" value="@(JObject.Parse((string)((JValue)context.Variables[&quot;hchbUserClaim&quot;]).Value)[&quot;tenantContext&quot;])" />
                                    </when>
                                    <when condition="@(((JValue)context.Variables[&quot;hchbInteropClaim&quot;]).Value != null)">
                                        <set-variable name="tenantContext" value="@(JObject.Parse((string)((JValue)context.Variables[&quot;hchbInteropClaim&quot;]).Value)[&quot;tenantContext&quot;])" />
                                    </when>
                                    <when condition="@(((JValue)context.Variables[&quot;hchbMobileUserClaim&quot;]).Value != null)">
                                        <set-variable name="tenantContext" value="@(JObject.Parse((string)((JValue)context.Variables[&quot;hchbMobileUserClaim&quot;]).Value)[&quot;tenantContext&quot;])" />
                                    </when>
                                    <otherwise>
                                        <return-response>
                                            <set-status code="403" reason="Forbidden" />
                                        </return-response>
                                    </otherwise>
                                </choose>
                                <!-- Ensure we escape the server and database in case of special characters for the agency lookup query string -->
                                <set-variable name="tenantServer" value="@(Uri.EscapeDataString((string)(((JObject)context.Variables[&quot;tenantContext&quot;])[&quot;serverName&quot;])))" />
                                <set-variable name="tenantDatabase" value="@(Uri.EscapeDataString((string)(((JObject)context.Variables[&quot;tenantContext&quot;])[&quot;databaseName&quot;])))" />
                                <set-variable name="agencyClusterUrlSuffix" value="@($&quot;/api/v1/agency/{(string)context.Variables[&quot;tenantServer&quot;]}/{(string)context.Variables[&quot;tenantDatabase&quot;]}?ignoreServerFilter=true&amp;ignoreDatabaseFilter=true&amp;ignoreDataCenterFilter=true&quot;)" />
                                <!-- Look to see if we cached agency info by tenant context -->
								<cache-lookup-value key="@(&quot;datacenter-&quot; + context.Variables[&quot;tenantServer&quot;] + &quot;-&quot; + context.Variables[&quot;tenantDatabase&quot;])" variable-name="agencyCacheLookupByTenantContext" default-value="" />
                            </when>
                            <otherwise>
                                <set-variable name="agencyClusterUrlSuffix" value="@($&quot;/api/v1/agency/{(string)context.Variables[&quot;agencyId&quot;]}?ignoreServerFilter=true&amp;ignoreDatabaseFilter=true&amp;ignoreDataCenterFilter=true&quot;)" />
                            </otherwise>
                        </choose>
                        <choose>
							<when condition="@((string)context.Variables[&quot;agencyCacheLookupByTenantContext&quot;] == &quot;&quot;)">
                                <!-- Check all agency state service instances until the agency is found -->
                                <retry condition="@(!context.Variables.ContainsKey(&quot;agencyInfo&quot;) || new List&lt;int&gt; {404,503}.Contains(((IResponse)context.Variables[&quot;agencyInfo&quot;]).StatusCode))" count="1" interval="1" first-fast-retry="true">
                                    <set-variable name="agencyClusterUrl" value="@($&quot;{(string)context.Variables[&quot;agencyClusterBaseUrl&quot;]}{(string)context.Variables[&quot;agencyClusterUrlSuffix&quot;]}&quot;)" />
                                    <set-variable name="newAgencyStateHostHeaderValue" value="@{ 
                                        var agencyHostHeaderValue = &quot;{{AgencyStateAksServiceHost}}&quot;;
                                        var agencyDelimIndex = agencyHostHeaderValue.IndexOf(&quot;.&quot;);
                                        var agencySuffix = (string)context.Variables[&quot;newAgencyHostHeaderSuffix&quot;];

                                        if(agencyDelimIndex &lt; 0)
                                        {
                                            return $&quot;{agencyHostHeaderValue}.{agencySuffix}&quot;;
                                        }
                                        else
                                        {
                                            return $&quot;{agencyHostHeaderValue.Substring(0, agencyDelimIndex)}.{agencySuffix}&quot;;
                                        }}" />
                                    <send-request mode="new" response-variable-name="agencyInfo" timeout="20">
                                        <set-url>@((string)context.Variables[&quot;agencyClusterUrl&quot;])</set-url>
                                        <set-method>GET</set-method>
                                        <!-- Set Host header for the api call -->
                                        <set-header name="Host" exists-action="override">
                                            <value>@((string)context.Variables[&quot;newAgencyStateHostHeaderValue&quot;])</value>
                                        </set-header>
                                    </send-request>
                                    <!-- Determine next agency state service to try -->
                                    <choose>
                                        <when condition="@((string)context.Variables[&quot;agencyClusterBaseUrl&quot;] == &quot;{{AksEastClusterUrl}}&quot;)">
                                            <set-variable name="agencyClusterBaseUrl" value="{{AksWestClusterUrl}}" />
                                            <set-variable name="newAgencyHostHeaderSuffix" value="{{AksWestClusterHostHeaderSuffix}}" />
                                        </when>
                                        <when condition="@((string)context.Variables[&quot;agencyClusterBaseUrl&quot;] == &quot;{{AksWestClusterUrl}}&quot;)">
                                            <set-variable name="agencyClusterBaseUrl" value="{{AksEastClusterUrl}}" />
                                            <set-variable name="newAgencyHostHeaderSuffix" value="{{AksEastClusterHostHeaderSuffix}}" />
                                        </when>
                                    </choose>
                                </retry>
                                <!-- Check and return here if not agency -->
                                <choose>
                                    <when condition="@(context.Variables[&quot;agencyInfo&quot;] == null || ((IResponse)context.Variables[&quot;agencyInfo&quot;]).StatusCode != 200)">
                                        <return-response>
                                            <set-status code="403" reason="Forbidden" />
                                        </return-response>
                                    </when>
                                </choose>
                                <set-variable name="agencyResponse" value="@(((IResponse)context.Variables[&quot;agencyInfo&quot;]).Body.As&lt;JObject&gt;())" />
                                <set-variable name="agencyId" value="@((string)((JObject)context.Variables[&quot;agencyResponse&quot;])[&quot;id&quot;])" />
                                <set-variable name="dataCenter" value="@((string)((JObject)context.Variables[&quot;agencyResponse&quot;])[&quot;dataCenter&quot;])" />
                                <!-- If we pulled by tenant context then cache by tenant context -->
                                <choose>
                                    <when condition="@((string)context.Variables[&quot;tenantServer&quot;] != &quot;&quot;)">
                                        <cache-store-value key="@(&quot;datacenter-&quot; + context.Variables[&quot;tenantServer&quot;] + &quot;-&quot; + context.Variables[&quot;tenantDatabase&quot;])" value="@((string)context.Variables[&quot;dataCenter&quot;])" duration="{{AgencyStateServiceCacheDuration}}" />
                                    </when>
                                </choose>
                                <!-- Cache the datacenter for the agency if available-->
                                <choose>
                                    <when condition="@((string)context.Variables[&quot;agencyId&quot;] != &quot;0&quot;)">
                                        <cache-store-value key="@(&quot;datacenter-&quot; + context.Variables[&quot;agencyId&quot;])" value="@((string)context.Variables[&quot;dataCenter&quot;])" duration="{{AgencyStateServiceCacheDuration}}" />
                                    </when>
                                </choose>
                            </when>
                            <otherwise>
                                <set-variable name="dataCenter" value="@((string)context.Variables[&quot;agencyCacheLookupByTenantContext&quot;])" />
                            </otherwise>
                        </choose>
                    </when>
                    <otherwise>
		    			<set-variable name="dataCenter" value="@((string)context.Variables[&quot;agencyCacheLookup&quot;])" />
                    </otherwise>
                </choose>
            </when>
            <!-- V2 token (IDP), Validate the token and ensure the data center claims are correct -->
            <otherwise>
                <validate-jwt header-name="Authorization" require-scheme="Bearer" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized" clock-skew="900">
                    <openid-config url="{{IdpBaseUrl}}/.well-known/openid-configuration" />
                    <issuers>
                        <issuer>{{IdpBaseUrl}}</issuer>
                    </issuers>
                    <required-claims>
                        <claim name="data_center" match="any">
                            <value>D</value> <!-- Dallas (OnPrem) -->
                            <value>L</value> <!-- Louisville (OnPrem) -->
                            <value>E</value> <!-- US East HCHB_NONRPOD (Old AAD Tenant) -->
                            <value>F</value> <!-- US West HCHB_NONPROD (Old AAD Tenant) -->
                            <value>G</value> <!-- US East HCHB_PROD (Old AAD Tenant) -->
                            <value>H</value> <!-- US West HCHB_PROD (Old AAD Tenant) -->
                            <value>M</value> <!-- US East NONRPOD (New AAD Tenant) -->
                            <value>N</value> <!-- US West NONRPOD (New AAD Tenant) -->
                            <value>Q</value> <!-- US East PROD (New AAD Tenant) -->
                            <value>R</value> <!-- US West PROD (New AAD Tenant) -->
                        </claim>
                    </required-claims>
                </validate-jwt>
            </otherwise>
        </choose>
        <!-- Collapse datacenter values for AKS cluster regions -->
        <choose>
            <when condition="@((new List&lt;string&gt; { &quot;E&quot;,&quot;G&quot;,&quot;M&quot;,&quot;Q&quot; }).Contains((string)context.Variables[&quot;dataCenter&quot;]))">
                <set-variable name="dataCenter" value="E"/>
            </when>
            <when condition="@((new List&lt;string&gt; { &quot;F&quot;,&quot;H&quot;,&quot;N&quot;,&quot;R&quot; }).Contains((string)context.Variables[&quot;dataCenter&quot;]))">
                <set-variable name="dataCenter" value="W"/>
            </when>
        </choose>
        <!-- set backend routes and host header suffixes -->
        <set-variable name="onPremLouClusterUrl" value="{{OnPremLouClusterUrl}}"/>
        <set-variable name="onPremLouClusterHostHeaderSuffix" value="{{OnPremLouClusterHostHeaderSuffix}}"/>
        <set-variable name="onPremDalClusterUrl" value="{{OnPremDalClusterUrl}}"/>
        <set-variable name="onPremDalClusterHostHeaderSuffix" value="{{OnPremDalClusterHostHeaderSuffix}}"/>
        <set-variable name="aksEastClusterUrl" value="{{AksEastClusterUrl}}"/>
        <set-variable name="aksEastClusterHostHeaderSuffix" value="{{AksEastClusterHostHeaderSuffix}}"/>
        <set-variable name="aksWestClusterUrl" value="{{AksWestClusterUrl}}"/>
        <set-variable name="aksWestClusterHostHeaderSuffix" value="{{AksWestClusterHostHeaderSuffix}}"/>
        <!-- override backend routes and host header if necessary-->
        <choose>
            <!-- when deployment_ring claim exists, call User Configuration to get baseUrl - cache by datacenter/ring -->
            <when condition="@((string)context.Variables[&quot;deploymentRing&quot;] != &quot;&quot;)">
                <cache-lookup-value key="@(&quot;userConfig-&quot; + context.Variables[&quot;dataCenter&quot;] + &quot;-&quot; + context.Variables[&quot;deploymentRing&quot;])" variable-name="userConfigResponseBody" default-value="" />
                <choose>
                    <!-- When no cached value -->
                    <when condition="@((string)context.Variables[&quot;userConfigResponseBody&quot;] == &quot;&quot;)">
                        <!-- Determine which agency state service to look at first for the user configuration -->
                        <choose>
                            <when condition="@(&quot;West US&quot;.Equals(context.Deployment.Region, StringComparison.OrdinalIgnoreCase))">
                                <set-variable name="userConfigClusterBaseUrl" value="{{AksWestClusterUrl}}" />
                            </when>
                            <otherwise>
                                <set-variable name="userConfigClusterBaseUrl" value="{{AksEastClusterUrl}}" />
                            </otherwise>
                        </choose>
                        <!-- Send the request to user config service -->
                        <send-request mode="new" response-variable-name="userConfigResponse" timeout="20" ignore-error="true">
                            <set-url>@($&quot;{(string)context.Variables[&quot;userConfigClusterBaseUrl&quot;]}/api/v1/ring&quot;)</set-url>
                            <set-method>GET</set-method>
                            <!-- Set Host header for the api call -->
                            <set-header name="Host" exists-action="override">
                                <value>{{UserConfigurationAksServiceHost}}</value>
                            </set-header>
                            <set-header name="Authorization" exists-action="override">
                                <value>@((string)context.Variables[&quot;authHeader&quot;])</value>
                            </set-header>
                        </send-request>
                        <!-- Parse the respose and set appropriate values for downstream routing. If response is empty or contains error code defer back to original routing scheme -->
                        <choose>
                            <when condition="@(context.Variables[&quot;userConfigResponse&quot;] != null &amp;&amp; ((IResponse)context.Variables[&quot;userConfigResponse&quot;]).StatusCode == 200)">
                                <set-variable name="userConfigResponseBody" value="@(((IResponse)context.Variables[&quot;userConfigResponse&quot;]).Body.As&lt;JObject&gt;().ToString())" />
                                <cache-store-value key="@(&quot;userConfig-&quot; + context.Variables[&quot;dataCenter&quot;] + &quot;-&quot; + context.Variables[&quot;deploymentRing&quot;])" value="@((string)context.Variables[&quot;userConfigResponseBody&quot;])" duration="{{UserConfigurationServiceCacheDuration}}" />
                            </when>
                        </choose>
                    </when>
                </choose>
                <!-- At this point I should always have a userConfigResponseBody, either from cache or a new call to user config -->
                <choose>
                    <when condition="@((string)context.Variables[&quot;userConfigResponseBody&quot;] != &quot;&quot;)">
                        <set-variable name="userConfigResponseBodyJObject" value="@(JObject.Parse((string)context.Variables[&quot;userConfigResponseBody&quot;]))" />
                        <set-variable name="userConfigClusterUrl" value="@((string)((JObject)context.Variables[&quot;userConfigResponseBodyJObject&quot;])[&quot;clusterUrl&quot;])" />
                        <set-variable name="userConfigHostHeaderSuffix" value="@((string)((JObject)context.Variables[&quot;userConfigResponseBodyJObject&quot;])[&quot;clusterDomain&quot;])" />
                        <!-- override backend routes and host header suffixes based on user config if exists -->
                        <choose>
                            <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;L&quot;)">
                                <set-variable name="onPremLouClusterUrl" value="@(((string)context.Variables[&quot;userConfigClusterUrl&quot;]))"/>
                                <set-variable name="onPremLouClusterHostHeaderSuffix" value="@(((string)context.Variables[&quot;userConfigHostHeaderSuffix&quot;]))"/>
                            </when>
                            <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;D&quot;)">
                                <set-variable name="onPremDalClusterUrl" value="@(((string)context.Variables[&quot;userConfigClusterUrl&quot;]))"/>
                                <set-variable name="onPremDalClusterHostHeaderSuffix" value="@(((string)context.Variables[&quot;userConfigHostHeaderSuffix&quot;]))"/>
                            </when>
                            <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;E&quot;)">
                                <set-variable name="aksEastClusterUrl" value="@(((string)context.Variables[&quot;userConfigClusterUrl&quot;]))"/>
                                <set-variable name="aksEastClusterHostHeaderSuffix" value="@(((string)context.Variables[&quot;userConfigHostHeaderSuffix&quot;]))"/>
                            </when>
                            <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;W&quot;)">
                                <set-variable name="aksWestClusterUrl" value="@(((string)context.Variables[&quot;userConfigClusterUrl&quot;]))"/>
                                <set-variable name="aksWestClusterHostHeaderSuffix" value="@(((string)context.Variables[&quot;userConfigHostHeaderSuffix&quot;]))"/>
                            </when>
                        </choose>
                    </when>
                </choose>
            </when>
        </choose>
        <!-- Route to proper backend -->
        <choose>
            <!-- If pinned to Louisville -->
	    	<when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;L&quot;)">
                <choose>
                    <!-- Check if Louisville backend is down, if so set backend to Dallas -->
		    		<when condition="@((bool)context.Variables[&quot;is-lou-down&quot;])">
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;onPremDalClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;onPremDalClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>D</value>
                        </set-header>
                    </when>
                    <!-- Set to Louisville backend -->
                    <otherwise>
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;onPremLouClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;onPremLouClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>L</value>
                        </set-header>
                    </otherwise>
                </choose>
            </when>
            <!-- If pinned to Dallas Region -->
	    	<when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;D&quot;)">
                <choose>
                    <!-- Check if Dallas backend is down, if so set backend to Louisville -->
		    		<when condition="@((bool)context.Variables[&quot;is-dal-down&quot;])">
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;onPremLouClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;onPremLouClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>L</value>
                        </set-header>
                    </when>
                    <!-- Set to Dallas backend -->
                    <otherwise>
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;onPremDalClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;onPremDalClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>D</value>
                        </set-header>
                    </otherwise>
                </choose>
            </when>
            <!-- If pinned to Azure East -->
            <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;E&quot;)">
                <choose>
                    <!-- Check if Azure East backend is down, if so set backend to Azure West -->
                    <when condition="@((bool)context.Variables[&quot;is-eus-down&quot;])">
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;aksWestClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;aksWestClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>W</value>
                        </set-header>
                    </when>
                    <!-- Set to Azure East backend -->
                    <otherwise>
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;aksEastClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;aksEastClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>E</value>
                        </set-header>
                    </otherwise>
                </choose>
            </when>
            <!-- If pinned to Azure West -->
            <when condition="@((string)context.Variables[&quot;dataCenter&quot;] == &quot;W&quot;)">
                <choose>
                    <!-- Check if Azure West backend is down, if so set backend to Azure East -->
                    <when condition="@((bool)context.Variables[&quot;is-wus-down&quot;])">
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;aksEastClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;aksEastClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>E</value>
                        </set-header>
                    </when>
                    <!-- Set to Azure West backend -->
                    <otherwise>
                        <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;aksWestClusterUrl&quot;]))" />
                        <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;aksWestClusterHostHeaderSuffix&quot;]))" />
                        <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                        <set-header name="DataCenterRedirect" exists-action="override">
                            <value>W</value>
                        </set-header>
                    </otherwise>
                </choose>
            </when> 
            <otherwise>
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                </return-response>
            </otherwise>
        </choose>
        <!-- Set Host header for the api call -->
        <set-variable name="newHostHeaderValue" value="@{ 
            var hostHeaderValue = (string)context.Variables[&quot;hostHeaderValue&quot;];
            var delimIndex = hostHeaderValue.IndexOf(&quot;.&quot;);
            var suffix = (string)context.Variables[&quot;newBackendHostHeaderSuffix&quot;];

            if(delimIndex &lt; 0)
            {
                return $&quot;{hostHeaderValue}.{suffix}&quot;;
            }
            else
            {
                return $&quot;{hostHeaderValue.Substring(0, delimIndex)}.{suffix}&quot;;
            }}" />
        <set-header name="Host" exists-action="override">
            <value>@((string)context.Variables[&quot;newHostHeaderValue&quot;])</value>
        </set-header>
    </inbound>
    <backend>
        <!-- On HttpStatus Not Found -->
        <retry condition="@(context.Response != null &amp;&amp; new List&lt;int&gt; {503}.Contains(context.Response.StatusCode) &amp;&amp; (string)context.Variables[&quot;autoRedirect&quot;] == &quot;true&quot;)" count="2" interval="1" first-fast-retry="true">
	    	<set-variable name="DataCenterRedirectHeader" value="@{return context.Request.Headers.GetValueOrDefault(&quot;DataCenterRedirect&quot;, (string[])null).First();}" />
            <choose>
	    		<when condition="@(context.Response != null &amp;&amp; new List&lt;int&gt; {503}.Contains(context.Response.StatusCode))">
                    <choose>
                        <!-- If Louisville is not found, repoint to Dallas backend and add cache key to denote Louisville is down -->
						<when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;L&quot;)">
                            <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;onPremDalClusterUrl&quot;]))" />
                            <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;onPremDalClusterHostHeaderSuffix&quot;]))" />
                            <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                            <set-header name="DataCenterRedirect" exists-action="override">
                                <value>D</value>
                            </set-header>
                            <cache-store-value key="@(&quot;is-lou-down-key-&quot; + context.Api.Id)" value="@(true)" duration="{{FailoverCacheDuration}}" />
                        </when>
                        <!-- If Dallas is not found, repoint to Louisville backend and add cache key to denote Dallas is down -->
						<when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;D&quot;)">
                            <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;onPremLouClusterUrl&quot;]))" />
                            <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;onPremLouClusterHostHeaderSuffix&quot;]))" />
                            <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                            <set-header name="DataCenterRedirect" exists-action="override">
                                <value>L</value>
                            </set-header>
                            <cache-store-value key="@(&quot;is-dal-down-key-&quot; + context.Api.Id)" value="@(true)" duration="{{FailoverCacheDuration}}" />
                        </when>
                        <!-- If Azure East is not found, repoint to Azure West backend and add cache key to denote Azure East is down -->
                        <when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;E&quot;)">
                            <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;aksWestClusterUrl&quot;]))" />
                            <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;aksWestClusterHostHeaderSuffix&quot;]))" />
                            <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                            <set-header name="DataCenterRedirect" exists-action="override">
                                <value>W</value>
                            </set-header>
                            <cache-store-value key="@(&quot;is-eus-down-key-&quot; + context.Api.Id)" value="@(true)" duration="{{FailoverCacheDuration}}" />
                        </when>
                        <!-- If Azure West is not found, repoint to Azure East backend and add cache key to denote Azure West is down -->
                        <when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;W&quot;)">
                            <set-variable name="newBackendHost" value="@(((string)context.Variables[&quot;aksEastClusterUrl&quot;]))" />
                            <set-variable name="newBackendHostHeaderSuffix" value="@(((string)context.Variables[&quot;aksEastClusterHostHeaderSuffix&quot;]))" />
                            <set-backend-service base-url="@{return (string)context.Variables[&quot;newBackendHost&quot;] + (context.Api.ServiceUrl?.Path ?? &quot;&quot;); }" />
                            <set-header name="DataCenterRedirect" exists-action="override">
                                <value>E</value>
                            </set-header>
                            <cache-store-value key="@(&quot;is-wus-down-key-&quot; + context.Api.Id)" value="@(true)" duration="{{FailoverCacheDuration}}" />
                        </when>
                    </choose>
                    <!-- Set Host header for the api call -->
                    <set-variable name="newHostHeaderValue" value="@{ 
                        var hostHeaderValue = (string)context.Variables[&quot;hostHeaderValue&quot;];
                        var delimIndex = hostHeaderValue.IndexOf(&quot;.&quot;);
                        var suffix = (string)context.Variables[&quot;newBackendHostHeaderSuffix&quot;];

                        if(delimIndex &lt; 0)
                        {
                            return $&quot;{hostHeaderValue}.{suffix}&quot;;
                        }
                        else
                        {
                            return $&quot;{hostHeaderValue.Substring(0, delimIndex)}.{suffix}&quot;;
                        }}" />
                    <set-header name="Host" exists-action="override">
                        <value>@((string)context.Variables[&quot;newHostHeaderValue&quot;])</value>
                    </set-header>
                </when>
            </choose>
            <forward-request buffer-request-body="true" />
            <choose>
                <!-- On Success -->
				<when condition="@(context.Response != null &amp;&amp; context.Response.StatusCode &gt;= 200 &amp;&amp; context.Response.StatusCode &lt; 400)">
		    		<set-variable name="DataCenterRedirectHeader" value="@{return context.Request.Headers.GetValueOrDefault(&quot;DataCenterRedirect&quot;, (string[])null).First();}" />
                    <choose>
                        <!--If we came from Louisville backend clear the East cache key -->
						<when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;L&quot;)">
                            <cache-remove-value key="@(&quot;is-lou-down-key-&quot; + context.Api.Id)" />
                        </when>
                        <!--If we came from Dallas backend clear the West cache key -->
						<when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;D&quot;)">
                            <cache-remove-value key="@(&quot;is-dal-down-key-&quot; + context.Api.Id)" />
                        </when>
                        <!--If we came from Azure East backend clear the Azure East cache key -->
                        <when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;E&quot;)">
                            <cache-remove-value key="@(&quot;is-eus-down-key-&quot; + context.Api.Id)" />
                        </when>
                        <!--If we came from Azure West backend clear the Azure West cache key -->
                        <when condition="@((string)context.Variables[&quot;DataCenterRedirectHeader&quot;] == &quot;W&quot;)">
                            <cache-remove-value key="@(&quot;is-wus-down-key-&quot; + context.Api.Id)" />
                        </when>
                    </choose>
                </when>
            </choose>
        </retry>
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>