<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <!-- Using Basic Auth here because the monitoring client doesn't support other methods -->
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault(&quot;Authorization&quot;)==null || context.Request.Headers.GetValueOrDefault(&quot;Authorization&quot;).AsBasic().UserId!=&quot;{{HealthCheckUserName}}&quot; || context.Request.Headers.GetValueOrDefault(&quot;Authorization&quot;).AsBasic().Password!=&quot;{{HealthCheckPassword}}&quot;)">
                <return-response>
                    <set-status code="401" reason="Not authorized" />
                </return-response>
            </when>
        </choose>
        <!-- Call Agency Service for each cluster to ensure cluster is responsive -->
        <send-request mode="new" response-variable-name="agencyInfoAksEast" timeout="20" ignore-error="true">
            <set-url>{{AksEastClusterUrl}}/api/v1/ping</set-url>
            <set-method>GET</set-method>
            <set-header name="Host" exists-action="override">
                <value>{{AgencyStateAksServiceHost}}</value>
            </set-header>
        </send-request>
        <send-request mode="new" response-variable-name="agencyInfoAksWest" timeout="20" ignore-error="true">
            <set-url>{{AksWestClusterUrl}}/api/v1/ping</set-url>
            <set-method>GET</set-method>
            <set-header name="Host" exists-action="override">
                <value>{{AgencyStateAksServiceHost}}</value>
            </set-header>
        </send-request>
        <send-request mode="new" response-variable-name="agencyInfoOnPremDal" timeout="20" ignore-error="true">
            <set-url>{{OnPremDalClusterUrl}}/api/v1/ping</set-url>
            <set-method>GET</set-method>
            <set-header name="Host" exists-action="override">
                <value>{{AgencyStateK8sServiceHost}}</value>
            </set-header>
        </send-request>
        <send-request mode="new" response-variable-name="agencyInfoOnPremLou" timeout="20" ignore-error="true">
            <set-url>{{OnPremLouClusterUrl}}/api/v1/ping</set-url>
            <set-method>GET</set-method>
            <set-header name="Host" exists-action="override">
                <value>{{AgencyStateK8sServiceHost}}</value>
            </set-header>
        </send-request>
        <!-- Call out and get an OAuth token from Azure AD to append and call backend with -->
        <send-request ignore-error="false" timeout="40" response-variable-name="bearerToken" mode="new">
            <set-url>{{AuthServerV2TokenEndpoint}}</set-url>
            <set-method>POST</set-method>
            <set-header name="Content-Type" exists-action="override">
                <value>application/x-www-form-urlencoded</value>
            </set-header>
            <set-body>@{
                var urlEncodedSecret = System.Uri.EscapeDataString(&quot;{{SureScriptsClientSecret}}&quot;);
                return &quot;client_id={{SureScriptsClientId}}&amp;scope={{SureScriptsScope}}/.default&amp;client_secret=&quot;+ urlEncodedSecret +&quot;&amp;grant_type=client_credentials&quot;;
            }</set-body>
        </send-request>
        <set-variable name="bearerHeader" value="@(&quot;Bearer &quot; + (String)((IResponse)context.Variables[&quot;bearerToken&quot;]).Body.As&lt;JObject&gt;()[&quot;access_token&quot;])" />
        <!-- Test the Dallas Route to InterSystems -->
        <send-request ignore-error="true" timeout="40" response-variable-name="dallasHCHBExchangeStatus" mode="new">
            <set-url>{{SureScriptsDallasApiEndpoint}}/HealthCheck</set-url>
            <set-method>GET</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@((string)context.Variables[&quot;bearerHeader&quot;])</value>
            </set-header>
        </send-request>
        <!-- Test the Louisville Route to InterSystems -->
        <send-request ignore-error="true" timeout="40" response-variable-name="louisvilleHCHBExchangeStatus" mode="new">
            <set-url>{{SureScriptsLouisvilleApiEndpoint}}/HealthCheck</set-url>
            <set-method>GET</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@((string)context.Variables[&quot;bearerHeader&quot;])</value>
            </set-header>
        </send-request>
        <!-- Set some flags to make status evaluations simpler -->
        <set-variable name="isDalError" value="@(context.Variables[&quot;dallasHCHBExchangeStatus&quot;] == null || !(bool)((IResponse)context.Variables[&quot;dallasHCHBExchangeStatus&quot;]).Body.As&lt;String&gt;().Contains(&quot;HealthCheck Success&quot;))" />
        <set-variable name="isLouError" value="@(context.Variables[&quot;louisvilleHCHBExchangeStatus&quot;] == null || !(bool)((IResponse)context.Variables[&quot;louisvilleHCHBExchangeStatus&quot;]).Body.As&lt;String&gt;().Contains(&quot;HealthCheck Success&quot;))" />
        <set-variable name="isAgencyAksEastError" value="@(context.Variables[&quot;agencyInfoAksEast&quot;] == null || ((IResponse)context.Variables[&quot;agencyInfoAksEast&quot;]).StatusCode != 200)" />
        <set-variable name="isAgencyAksWestError" value="@(context.Variables[&quot;agencyInfoAksWest&quot;] == null || ((IResponse)context.Variables[&quot;agencyInfoAksWest&quot;]).StatusCode != 200)" />
        <set-variable name="isAgencyOnPremLouError" value="@(context.Variables[&quot;agencyInfoOnPremLou&quot;] == null || ((IResponse)context.Variables[&quot;agencyInfoOnPremLou&quot;]).StatusCode != 200)" />
        <set-variable name="isAgencyOnPremDalError" value="@(context.Variables[&quot;agencyInfoOnPremDal&quot;] == null || ((IResponse)context.Variables[&quot;agencyInfoOnPremDal&quot;]).StatusCode != 200)" />
        <set-variable name="healthcheckStatus" value="@{ 
            if(context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isDalError&quot;) 
                || context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isLouError&quot;)
                || context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isAgencyAksEastError&quot;)
                || context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isAgencyAksWestError&quot;)
                || context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isAgencyOnPremLouError&quot;)
                || context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isAgencyOnPremDalError&quot;))
            {
                return &quot;error&quot;;
            }
            return &quot;success&quot;;
            }" />
        <!-- Aggregate the results and return a 200 with response json -->
        <return-response>
            <set-status code="200" reason="OK" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                        return new JObject(
                            new JProperty(&quot;Region&quot;,context.Deployment.Region),
                            new JProperty(&quot;ServerName&quot;, context.Deployment.ServiceName),
                            new JProperty(&quot;AppName&quot;, context.Api.Name),
                            new JProperty(&quot;HealthCheckStatus&quot;, context.Variables.GetValueOrDefault(&quot;healthcheckStatus&quot;)),
                            new JProperty(&quot;RouteStatus&quot;,
                            new JArray(
                                new JObject(
                                    new JProperty(&quot;Route&quot;, &quot;{{SureScriptsDallasApiEndpoint}}/HealthCheck&quot;),
                                    new JProperty(&quot;Error&quot;, context.Variables.GetValueOrDefault(&quot;isDalError&quot;))
                                    ),
                                new JObject(
                                    new JProperty(&quot;Route&quot;, &quot;{{SureScriptsLouisvilleApiEndpoint}}/HealthCheck&quot;),
                                    new JProperty(&quot;Error&quot;, context.Variables.GetValueOrDefault(&quot;isLouError&quot;))
                                    ),
                                new JObject(
                                    new JProperty(&quot;Route&quot;, &quot;{{AksEastClusterUrl}}/api/v1/ping&quot;),
                                    new JProperty(&quot;Error&quot;, context.Variables.GetValueOrDefault(&quot;isAgencyAksEastError&quot;))
                                    ),
                                new JObject(
                                    new JProperty(&quot;Route&quot;, &quot;{{AksWestClusterUrl}}/api/v1/ping&quot;),
                                    new JProperty(&quot;Error&quot;, context.Variables.GetValueOrDefault(&quot;isAgencyAksWestError&quot;))
                                    ),
                                new JObject(
                                    new JProperty(&quot;Route&quot;, &quot;{{OnPremDalClusterUrl}}/api/v1/ping&quot;),
                                    new JProperty(&quot;Error&quot;, context.Variables.GetValueOrDefault(&quot;isAgencyOnPremDalError&quot;))
                                    ),
                                new JObject(
                                    new JProperty(&quot;Route&quot;, &quot;{{OnPremLouClusterUrl}}/api/v1/ping&quot;),
                                    new JProperty(&quot;Error&quot;, context.Variables.GetValueOrDefault(&quot;isAgencyOnPremLouError&quot;))
                                    )
                            ))).ToString();
                    }</set-body>
        </return-response>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <return-response>
            <set-status code="200" reason="OK" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                        return new JObject(
                            new JProperty(&quot;Region&quot;,context.Deployment.Region),
                            new JProperty(&quot;ServerName&quot;, context.Deployment.ServiceName),
                            new JProperty(&quot;AppName&quot;, context.Api.Name),
                            new JProperty(&quot;Status&quot;,
                            new JArray(
                                new JObject(
                                    new JProperty(&quot;Message&quot;, context.LastError.Message),
                                    new JProperty(&quot;Level&quot;, &quot;error&quot;),
                                    new JProperty(&quot;SrcMethod&quot;, context.LastError.Source),
                                    new JProperty(&quot;Code&quot;, context.LastError.Reason),
                                    new JProperty(&quot;Path&quot;, context.LastError.Path)
                            )))).ToString();
            }</set-body>
        </return-response>
    </on-error>
</policies>